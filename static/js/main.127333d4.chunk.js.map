{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadData","bind","assertThisInitialized","state","quotes","names","_this2","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","lines","responseText","split","sort","Math","random","slice","_zip","rows","toConsumableArray","map","item","_","c","row","_zip2","slicedToArray","setState","open","send","startDate","Date","endDate","console","log","length","react_default","a","createElement","className","App_Header","App_Carousel","Component","Header","CarouselIndicators","data-target","data-slide-to","Array","apply","numberOfElements","e","i","key","CarouselSlide","active","quote","name","CarouselButton","data-slide","left","href","Carousel","_this3","data-ride","id","App_CarouselIndicators","App_CarouselSlide","App_CarouselButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.127333d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst numberOfElements = 8;\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.loadData = this.loadData.bind(this);\n    this.state = {quotes: [], names: []};\n  }\n  loadData(){\n    const zip = rows=>rows[0].map((_,c)=>rows.map(row=>row[c]));\n    /*\n      zip: Function to zip together multiple lists\n      i.e.: zip([\n                    [1, 2, 3],\n                    [4, 5, 6],\n                    [7, 8, 9]\n               ])\n               =>\n                   [[1, 4, 7],\n                    [2, 5, 8],\n                    [3, 6, 9]]\n\n    */\n    var url = \"https://docs.google.com/spreadsheets/d/e/2PACX-1vRqa3pWvE0mjjU3KMVOsXG5mpb2LjlEr6RscTm8X8VKIWHHrdQbqYxdZHqHXry4yd7snLLC_PJWyulO/pub?output=tsv\";\n    //load data from google sheets\n    let xmlhttp = new XMLHttpRequest();\n    xmlhttp.onreadystatechange = () => {\n      if (xmlhttp.readyState === 4) {\n        let data = xmlhttp.responseText.split(\"\\n\");\n        const shuffled = data.sort(() => 0.5 - Math.random());\n        let lines = shuffled.slice(0, numberOfElements);\n        let [quotes, ids, names] = zip([...lines.map(item=>{return item.split('\\t')})])\n\n        this.setState({quotes: quotes, names: names});\n      }\n    };\n    xmlhttp.open(\"GET\", url, true);\n    xmlhttp.send(null);\n  }\n  componentDidMount() {\n    const startDate = new Date();\n    this.loadData();\n    const endDate = new Date();\n    console.log(\"It took \"+(endDate-startDate)/1000+\" miliseconds to load from external spreadsheet\");\n\n  }\n  render() {\n    if(!this.state.quotes.length){\n      return (\n        <div className=\"container\">\n        </div>\n      );\n    }\n    return (\n      <div className=\"container\">\n      <Header/>\n      <Carousel quotes={this.state.quotes} names={this.state.names}/>\n      </div>\n    );\n  }\n}\n\nclass Header extends Component {\n  render(){\n    return (\n      <div className=\"row\">\n      <div className='col-md-offset-2 col-md-8 text-center'>\n      <h2>Got It Reviews</h2>\n      </div>\n      </div>\n    );\n  }\n}\nclass CarouselIndicators extends Component {\n  render() {\n    return (\n      <ol className=\"carousel-indicators\">\n      <li data-target=\"#quote-carousel\" data-slide-to=\"0\" className=\"active\"></li>\n      {Array.apply(null, {length: numberOfElements-1}).map((e, i) => {\n        return <li data-target=\"#quote-carousel\" data-slide-to={i+1} key={i+1}></li>\n      })}\n      </ol>\n    )\n  }\n}\n\nclass CarouselSlide extends Component {\n  render() {\n    return (\n      <div className={this.props.active ? \"item active\": \"item\"}>\n      <blockquote>\n      <div className=\"row\">\n      <div className=\"col-sm-9 quote\">\n      <p>{this.props.quote}</p>\n\n      </div>\n      </div>\n      <div className=\"row\">\n      <div className=\"col-sm-3 right-name\">\n      <small>{this.props.name}</small>\n      </div>\n      </div>\n      </blockquote>\n      </div>\n    );\n  }\n}\n\nclass CarouselButton extends Component {\n  render() {\n    return (\n      <a data-slide={this.props.left ? \"prev\" : \"next\"} href=\"#quote-carousel\" className={this.props.left ? \"left carousel-control\" : \"right carousel-control\"}><i className={this.props.left ? \"fa fa-chevron-left\" : \"fa fa-chevron-right\"}></i></a>\n    )\n  }\n}\n\nclass Carousel extends Component {\n  render() {\n    return (\n      <div className='row'>\n      <div className='col-md-offset-2 col-md-8'>\n      <div className=\"carousel slide\" data-ride=\"carousel\" id=\"quote-carousel\">\n      <CarouselIndicators/>\n      <div className=\"carousel-inner\">\n      <CarouselSlide quote={this.props.quotes[0]} name={this.props.names[0]} active={true} key={0}/>\n      {Array.apply(null, {length: numberOfElements-1}).map((e, i) => {\n        return <CarouselSlide quote={this.props.quotes[i+1]} name={this.props.names[i+1]} active={false} key={i+1}/>\n      })}\n      </div>\n      <CarouselButton left={true}/>\n      <CarouselButton left={false}/>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}